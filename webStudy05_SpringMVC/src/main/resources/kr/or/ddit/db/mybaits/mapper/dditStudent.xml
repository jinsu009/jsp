<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.servlet03.dao.IDDITStudentDAO">
	
	<resultMap type="DDITStudentVO" id="studentMap" autoMapping="true">
		<id property="code" column="CODE"/>
		<collection property="license" javaType="java.util.List">
			<result property="" column="LICENSE"/>
		</collection>
	</resultMap>

	<sql id="searchFrag">
		<where>
			<if test="searchVO!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchVO.searchWord)">
				<choose>
					<when test="'name'.equals(searchVO.searchType)">
						name LIKE '%'||#{searchVO.searchWord}||'%'
					</when>
					<when test="'career'.equals(searchVO.searchType)">
						INSTR(career,#{searchVO.searchWord}) > 0 
					</when>
					<otherwise>
						name LIKE '%'||#{searchVO.searchWord}||'%'
		    			OR
		    			INSTR(career,#{searchVO.searchWord}) > 0 
					</otherwise>
				</choose>
			</if>
		</where>
	</sql>

	<select id="selectStudentCount" resultType="int" parameterType="PagingVO">
		select count(*)
		from dditstudent	
		<include refid="searchFrag"/>
	</select>
	
	<select id="selectAllStudent" resultType="DDITStudentVO" parameterType="PagingVO">
		select A.*
		from (
			SELECT rownum RNUM ,code, name, to_char(birthday,'YYYY-MM-DD') birthday,
			 age, gr_code grade, DECODE(gen, 'M', '남', '여') gender, career
			FROM dditstudent
			<include refid="searchFrag"/>
			order by name desc
		) A
		<![CDATA[
			where RNUM >= #{startRow} and RNUM <= #{endRow}
		]]>
	</select>

	<select id="selectStudent" resultMap="studentMap" parameterType="string">
		select a.code, name, to_char(birthday, 'yyyy-mm-dd') birthday,age,
		b.text grade, decode(gen, 'M', '남','여') gender, career, d.text license
		from dditstudent a inner join grade b on (gr_code = b.code)
		left outer join std_license c on (a.code = c.std_code)
		left outer join license d on (c.lic_code = d.code)
		 where a.code= #{code}
	</select>

	<insert id="insertStudent" parameterType="DDITStudentVO">
	<selectKey resultType="string" keyProperty="code" order="BEFORE">
		select 'S' || lpad(to_number(substr(MAX(CODE),2))+1,3,'0')
		from dditstudent
	</selectKey>
		insert all into dditstudent ( code, name, birthday, age, gr_code, gen, career)
		values ( #{code}, #{name}, to_date(#{birthday},'YYYY-MM-DD'), #{age}, #{grade}, #{gender}, #{career})
		<if test="lic_codes!=null">
			<foreach collection="lic_codes" item="lic_codes">
				INTO STD_LICENSE(STD_CODE,LIC_CODE) VALUES(#{code} , #{lic_codes[]})
			</foreach>
		</if>
		select * from dual	
	</insert>
	
	<update id="updateStudent" parameterType="DDITStudentVO">
		UPDATE dditstudent 
		SET NAME = #{name} , birthday = to_date(#{birthday},'YYYY-MM-DD'), age = #{age}, gr_code = #{grade} ,  gen = #{gender} , career =#{career}
		WHERE CODE = #{code}
	</update>
	
	<delete id="deleteStudent" parameterType="string">
		delete from dditstudent where code = #{code}
	</delete>

</mapper>